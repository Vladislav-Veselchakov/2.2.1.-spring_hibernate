1) add in "Edit configurations" -- "add VM opions":
--add-opens java.base/java.lang=ALL-UNNAMED
2) Add dependencies (in pom file):
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>2.3.2</version>
        </dependency>

        <!-- Runtime, com.sun.xml.bind module -->
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>2.3.2</version>
        </dependency>
3) change vertion my-sql-core in dependency (was v.6, now v. 8.0.26):
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.26</version>
        </dependency>
4) Add two (2) hibernate properties:
      props.put("hibernate.dialect", "org.hibernate.dialect.MySQL5Dialect");
      props.put("hibernate.connection.driver_class",  "com.mysql.cj.jdbc.Driver" );

OR you can add them in db.properties file:

hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
hibernate.connection.driver_class=com.mysql.cj.jdbc.Driver
and in appConfig.java file:
      props.put("hibernate.dialect", env.getProperty("hibernate.dialect"));
      props.put("hibernate.connection.driver_class",  env.getProperty("hibernate.connection.driver_class"));

============================================================
hibernate.hbm2ddl.auto - свойство, которое указывается что нужно сделать со схемой БД при инициализации
create -    При запуске приложения будет создавать схему заново. Все данные которые были в старой схеме потеряются.
update -    При запуске приложения будет осуществляться сверка имеющейся в БД схемы с классами приложения. Если были изменения,то схема обновится, а данные останутся.
create-drop - Аналогично create,только после завершения схема с данными будет удаляться.
validate -  Будет проверять соответствие схемы и классов,если соответствия нет ,то выбросится исключение.
none -      ничего не делает со схемой, не вносит изменений в базу данных

================================
LazyInitializationException can resolve by:

1. force initialize :
 Hibernate.initialize(lstCar.get(0).getUser());
2. force initialize by "left join fetch" or simply "join fetch" and 2nd param Car.class:
 Query query = session.createQuery("select c from Car c left join fetch c.user where c.model = :model and c.series = :series", Car.class);
